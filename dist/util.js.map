{"version":3,"sources":["main.js","lib/arcadia.js","lib/micro-libs/ajax.js"],"names":[],"mappingsfile":"util.js","sourceRoot":"/source/","sourcesContent":["import Arcadia from 'lib/arcadia';\n\nlet ajaxSettings = {\n  url: 'index.html',\n  type: 'get',\n  success: (data) => {\n    console.log(`Response Length: ${data.length}`);\n  }\n};\n\nArcadia.ajax(ajaxSettings);\n\nArcadia.ajax().call(ajaxSettings);\n\ndelete ajaxSettings.type;\n\nArcadia.ajax().get(ajaxSettings);\n","import Ajax from 'lib/micro-libs/ajax';\n//import Animation from 'lib/micro-libs/animation';\n//import Fingerprinting from 'lib/micro-libs/fingerprinting';\n//import Mediator from 'lib/micro-libs/mediator';\n//import Perf from 'lib/micro-libs/performance';\n//import Utils from 'lib/micro-libs/utils';\n//import * as dom from 'lib/micro-libs/dom';\n\n/**\n * Arcadia class containing all static functions\n */\nexport default class Arcadia {\n  constructor (...args) {\n    // Controlling default actions\n    // mainMicroLib(...args);\n  }\n\n  static ajax(config) {\n    return new Ajax(config);\n  }\n\n  static animation() {\n    return new Animation();\n  }\n\n  static fingerprinting(...args) {\n    return new Fingerprinting(...args);\n  }\n\n  static mediator() {\n    return new Mediator();\n  }\n\n  static publish() {\n    return new mediator().publish;\n  }\n\n  static subscribe() {\n    return new mediator().subscribe;\n  }\n\n  static perf() {\n    return new Perf();\n  }\n\n  static utils() {\n    return new Utils();\n  }\n\n  static dom() {\n    return new dom();\n  }\n\n  static on() {\n    return new dom().on;\n  }\n\n  static select(...args) {\n    return new dom(...args);\n  }\n}\n","/**\n * Ajax methods\n */\nexport default class Ajax {\n  constructor (config) {\n    if (config) {\n      this.call(config);\n    }\n  }\n\n  /**\n   * Call AJAX functionality\n   * @param {object} config\n   * @returns {string | JSON | undefined}\n   */\n  call(config) {\n    config = this.checkConfig(config);\n\n    var call = this.getRequestObject(config.crossDomain);\n\n    var getLoadAPIName = this.getLoadAPIName(call);\n\n    call.open(config.type, config.url, true);\n\n    call[getLoadAPIName] = () => {\n      this.responseHandler(call, config);\n    }\n\n    if (call.onerror) {\n      call.onerror = function (e) {\n        this.throwError(e, config);\n      };\n    }\n\n    if (call.withCredentials && config.crossDomain) {\n      call.withCredentials = true;\n    }\n\n    if (config.requestHeader && call.setRequestHeader) {\n      call.setRequestHeader(config.requestHeader.header, config.requestHeader.value);\n    }\n\n    call.send(this.sendData(config));\n  }\n\n  /**\n   * Get request\n   * @param {object} config\n   */\n  get(config = {}) {\n    config.type = 'GET';\n    this.call(config);\n  }\n\n  /**\n   * Put request\n   * @param {object} config\n   * @returns {object}\n   */\n  put(config = {}) {\n    config.type = 'PUT';\n    this.call(config);\n  }\n\n  /**\n   * Post request\n   * @param {object} config\n   */\n  post(config = {}) {\n    config.type = 'POST';\n    this.call(config);\n  }\n\n  /**\n   * Check config parameter, apply default when required\n   * @param {object} config\n   * @returns {object}\n   */\n  checkConfig(config) {\n    if (!config.url) {\n      throw new Error('Invalid value of param', `Expected url to be String, got ${typeof config.url}`, 'ajax call');\n    }\n\n    return {\n      // API/End point\n      url: config.url || '',\n\n      // Type of request GET, PUT, POST\n      type: config.type || 'GET',\n\n      // Data to send to the API\n      send: config.send || null,\n\n      // Return data format as 'JSON'\n      dataType: config.dataType || null,\n\n      // Error callback\n      error: config.error || undefined,\n\n      // Success callback\n      success: config.success || undefined,\n\n      // Cross-origin resource sharing, callback function must contain JSONP function\n      crossDomain: config.crossDomain || false,\n\n      // Request headers\n      requestHeader: config.requestHeader || false\n    }\n  }\n\n  /**\n   * Get request object\n   * @param {boolean} crossDomain\n   * @returns {object}\n   */\n  getRequestObject(crossDomain) {\n    try {\n      // IE8\n      return crossDomain ? new XDomainRequest() : new ActiveXObject('Microsoft.XMLHTTP');\n    } catch (error) {\n      return new XMLHttpRequest();\n    }\n  }\n\n  /**\n   * Get load type\n   * @param call\n   * @returns {string}\n   */\n  getLoadAPIName(call) {\n    return call.onload === null ? 'onload' : 'onreadystatechange';\n  }\n\n  /**\n   * Ajax response handler\n   * @param call\n   * @param config\n   * @returns {object | string}\n   */\n  responseHandler(call, config) {\n    if (call.readyState === 4) {\n      var status = call.status;\n\n      if (status === 200) {\n        config.responseText = call.response || call.responseText;\n        return this.parseResponse(config);\n      }\n\n      if (status === 400) {\n        return this.responseError(config.error, ['AJAX error: ', 'status 400', `AJAX call was not available for ${config.url}`]);\n      }\n\n      if (status === 404) {\n        return this.responseError(config.error, ['AJAX error: ', 'status 404', `AJAX call was not found for ${config.url}`]);\n      }\n      return this.responseError(config.error, ['AJAX error: ', 'status ' + status, `AJAX call failed for ${config.url}`]);\n    }\n  }\n\n  /**\n   * Error handler\n   * @param customError\n   */\n  responseError(customError, {error, status, message}) {\n    if (customError) {\n      return customError.apply(this, [error, status, message]);\n    }\n    throw new Error(error, status, message);\n    return false;\n  }\n\n  /**\n   * Ajax error handler\n   * @param e\n   * @param config\n   * @returns {object}\n   */\n  throwError(e, config) {\n    if (typeof config.error === 'function') {\n      config.error(e);\n    }\n    throw new Error('AJAX warning: ', 'onerror thrown', e.message, e.stack);\n    return false;\n  }\n\n  /**\n   * What should be sent with the request to the URL\n   * @param config\n   * @returns {string}\n   */\n  sendData(config) {\n    if (config.type.toLowerCase() !== 'get') {\n      if (typeof config.send === 'string') {\n        return config.send;\n      } else {\n        return JSON.stringify(config.send);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Parse data from request\n   * @param config\n   * @returns {JSON | string}\n   */\n  parseResponse(config) {\n    if (config.dataType && config.dataType.toLowerCase() === 'json') {\n      if (isJSON(config.responseText)) {\n        config.responseText = JSON.parse(config.responseText);\n      }\n    }\n    if (typeof config.success === 'function') {\n      return config.success(config.responseText);\n    }\n    return config.responseText;\n  }\n\n  /**\n   * Check if string is JSON\n   * @param string\n   * @returns {boolean}\n   */\n  isJSON(string) {\n    let returnValue = false;\n    if (typeof string === 'string') {\n      try {\n        JSON.parse(string);\n        returnValue = true;\n      } catch (e) {\n        returnValue = false;\n      }\n    }\n    return returnValue;\n  }\n}\n"]}